@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5">Delete @(ModelName)?</MudText>
        <MudDivider />
    </TitleContent>
    <DialogContent>
        @if (!deleting)
        {
            <MudText>Are you sure you want to delete @(ModelName)?</MudText>
        }
        else
        {
            <MudText>Deleting @(ModelName)...</MudText>
            <MudProgressLinear Indeterminate="true" Color="Color.Secondary"/>
        }
        @if (deleteError)
        {
            <MudAlert Severity="Severity.Error">There was an error trying to delete that model:<br/>@errorMessage</MudAlert>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Secondary" OnClick="DeleteAsync" Disabled="deleting" Variant="Variant.Outlined"
                   StartIcon="@Icons.Material.Filled.Delete" IconColor="Color.Secondary">Delete</MudButton>
        <MudButton Color="Color.Primary" OnClick="Close" Disabled="deleting" Variant="Variant.Outlined">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; }
    [Parameter] public required OllamaApiClient Ollama { get; set; }
    [Parameter] public required string ModelName { get; set; }
    
    private bool deleting = false;
    private bool deleteError = false;
    
    private string errorMessage = string.Empty;
    
    private void Close() => MudDialog.Close(DialogResult.Cancel());
    
    protected override void OnInitialized()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomStart;
    }

    private async Task DeleteAsync()
    {
        try
        {
            deleting = true;
            deleteError = false;
            errorMessage = string.Empty;
            await Ollama.DeleteModelAsync(ModelName);
            
            deleting = false;
            Snackbar.Add($"Model {ModelName} deleted successfully.", Severity.Success, config =>
            {
                config.SnackbarVariant = Variant.Outlined;
                config.Icon = Icons.Material.Filled.Delete;
            });
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            deleting = false;
            deleteError = true;
            errorMessage = ex.Message;
        }
    }
}